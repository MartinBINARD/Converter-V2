@use '../../styles/variables' as v;

.App {
  /*
    on fixe la hauteur à 90 % de son parent
    (il sera centré automatiquement grâce au flexbox appliqué sur son parent)
    on se sert de `display: flex`
      pour « empiler les enfants » en colonne
  */
  background: v.$color-light;
  color: v.$color;
  display: flex;
  flex-direction: column;
  height: 90%;
  max-width: 480px;
  width: 90vw;
}

.header {
  background: v.$color;
  color: v.$color-light;
  padding: v.$gutter * 1.5;
  text-align: center;

  /*
    & va être remplacé par le texte du sélecteur parent
  */

  &-title {
    // & = .header → &-title = .header-title
    display: block;
    font-size: 3.2rem;
    font-weight: 700;

    &:hover {
      // & = .header-title → &:hover = .header-title:hover
      color: v.$color-alt;
    }
  }

  &-amount {
    // & = .header → &-amount = .header-amount
    font-size: 2.1rem;

    &__input {
      background: transparent;
      border: 0;
      border-bottom: 1px solid v.$color-light;
      color: v.$color-light;
      display: inline-block;
      margin-right: 1.6rem;
      width: 9.6rem;

      &:focus {
        outline: none;
      }
    }
  }
}

.currencies {
  flex-grow: 1; // https://developer.mozilla.org/fr/docs/Web/CSS/flex-grow
  overflow: auto; // on permet le scroll
  padding-top: v.$gutter;

  // &-title,
  &-search,
  .currency {
    border-bottom: 1px solid v.$color-alt;
    height: v.$list-item-height;
    line-height: v.$list-item-height;
    padding: 0 v.$gutter;
  }

  // &-title {
  //   font-size: 1.6rem;
  //   font-weight: 700;
  // }

  &-search {
    border-width: 0 0 1px;
    color: v.$color;
    font-size: 1.6rem;
    font-weight: 700;
    width: 100%;

    &:focus {
      outline: 0;
    }

    &::placeholder {
      color: v.$color;
      font-weight: 300;
    }

    // Pour modifier la croix du type search
    &::-webkit-search-cancel-button {
      -webkit-appearance: none;

      // on a besoin d'encoder le `#` de notre couleur mise en variable
      // # → %23
      // on doit retirer le `#` et le remplacer
      // pour le retirer, on se sert d'une fonction SCSS
      // `str-slice('string', 2)` → 'tring' // commence au 2ème caractère
      // puis on concatène
      background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23' + str-slice(
          '#{v.$color-alt}',
          2
        ) + '"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/></svg>');
      cursor: pointer;
      height: 2.4rem;
      width: 2.4rem;

      &:hover {
        background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23' + str-slice(
            '#{v.$color}',
            2
          ) + '"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/></svg>');
      }
    }
  }

  &-list {
    list-style: none;
    padding: 0;
  }
}

.currency {
  background-color: v.$color-light;
  cursor: pointer;
  font-weight: 500;
  transition: background-color v.$delay-slow linear;

  &:hover {
    // .currency:hover
    background-color: v.$color-alt;
    transition: background-color v.$delay-fast linear;
  }
}

.result {
  padding: v.$gutter * 1.5;
  text-align: center;

  &-value {
    display: block;
    font-size: 4rem;
    font-weight: 700;
  }

  &-currency {
    font-size: 2.4rem;
  }
}

/*
  TOGGLER
*/
$toggler-width: 4.8rem;
$toggler-width-semi: calc($toggler-width / 2);
$toggler-width-mini: calc($toggler-width / 20);

// @debug "toggler-width-mini >>> #{$toggler-width-mini}";

.header {
  position: relative;
}

.toggler {
  align-items: center;
  background: v.$color-alt;
  border: 3px solid v.$color-light;
  border-radius: 50%;
  bottom: -$toggler-width-semi;
  color: v.$color;
  display: flex;
  font-size: $toggler-width-semi;
  height: $toggler-width;
  justify-content: center;
  left: 50%;
  position: absolute;
  transform: translateX(-50%);
  width: $toggler-width;

  &-btn {
    background: transparent;
    border: 0;
    cursor: pointer;
    padding: 0;

    span {
      background: v.$color-light;
      border-radius: $toggler-width-mini;
      display: block;
      height: $toggler-width-mini;
      position: relative;
      transition: all 0.3s;
      width: $toggler-width-semi;

      &:nth-child(1) {
        animation: ease 0.7s top forwards;
      }

      &:nth-child(2) {
        animation: ease 0.7s scaled forwards;
      }

      &:nth-child(3) {
        animation: ease 0.7s bottom forwards;
      }
    }

    span + span {
      margin-top: $toggler-width-mini * 2;
    }

    &--open {
      span {
        &:nth-child(1) {
          animation: ease 0.7s top-close forwards;
        }

        &:nth-child(2) {
          animation: ease 0.7s scaled-close forwards;
        }

        &:nth-child(3) {
          animation: ease 0.7s bottom-close forwards;
        }
      }
    }
  }
}

@keyframes top {
  0% {
    top: 0.72rem;
    transform: rotate(45deg);
  }
  50% {
    top: 0.72rem;
    transform: rotate(0deg);
  }
  100% {
    top: 0;
    transform: rotate(0deg);
  }
}

@keyframes bottom {
  0% {
    bottom: 0.72rem;
    transform: rotate(-45deg);
  }
  50% {
    bottom: 0.72rem;
    transform: rotate(0);
  }
  100% {
    bottom: 0;
    transform: rotate(0);
  }
}

@keyframes scaled {
  0% {
    transform: scale(0);
  }
  50% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes top-close {
  0% {
    top: 0;
    transform: rotate(0);
  }
  50% {
    top: 0.72rem;
    transform: rotate(0);
  }
  100% {
    top: 0.72rem;
    transform: rotate(45deg);
  }
}

@keyframes bottom-close {
  0% {
    bottom: 0;
    transform: rotate(0);
  }
  50% {
    bottom: 0.72rem;
    transform: rotate(0);
  }
  100% {
    bottom: 0.72rem;
    transform: rotate(-45deg);
  }
}

@keyframes scaled-close {
  50% {
    transform: scale(0);
  }
  100% {
    transform: scale(0);
  }
}
